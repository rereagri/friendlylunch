<!DOCTYPE html>
<html lang="en">

<head>

  <!-- 
    This is the main Handlebars template for the site 
    - When the user visits the homepage or submits a choice the app calls the endpoints in server.js
    - The server script passes data in here and the Handlebars code builds it into the HTML page
  -->

  <meta charset="utf-8" />
  <link rel="icon" href="https://glitch.com/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>{{seo.title}}</title>

  <!-- Meta tags for SEO and social sharing -->
  <link rel="canonical" href="{{seo.url}}">
  <meta name="description" content="{{seo.description}}">
  <meta property="og:title" content="{{seo.title}}">
  <meta property="og:type" content="article">
  <meta property="og:url" content="{{seo.url}}">
  <meta property="og:description" content="{{seo.description}}">
  <meta property="og:image" content="{{seo.image}}">
  <meta name="twitter:card" content="summary">

  <!--bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
  
  <!-- Import the webpage's stylesheet -->
  <link rel="stylesheet" href="/style.css" />

  <!-- Show choice chart on poll submission -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script type="text/javascript">
    /*
    The chart uses chart.js - try tweaking the config!
    https://www.chartjs.org/docs/3.0.2/charts/doughnut.html
    
    We pass the choices and picks arrays from the page when the server script returns them
    */
    function showChart(choices, picks) {
      
      // Get the page element to show the chart inside
      var ctx = document.getElementById('myChart');
      
      // Set up the chart colors
      var colors = ["#05DA84", "#E6E656", "#E5AED6"];
      var border = "#ffffff";
      
      // Make sure we have some votes–if not show an empty chart
      if(picks.reduce((a, b) => a + b, 0)<1) {
        picks=["1e-10"]; // use a near zero value so that the doughnut displays
        choices=["No votes! Reload and vote again."];
        colors=["#00000000"]; // we'll show an empty doughnut shape
        border=["#000000"];
      }
      
      // Build the chart in the page element
      var myLineChart = new Chart(ctx, {
        type: "doughnut",
        data: {
          labels: choices,
          datasets: [{
            data: picks,
            backgroundColor: colors,
            borderColor: border,
            fill: true,
            hoverOffset: 12,
            cutout: "60%"
          }]
        },
        options: {
          plugins: {
            legend: {
              display: true,
              position: "bottom",
              labels: {
                padding: 24
              }
            }
          },
          layout: {
            padding: 24
          }
        }
      });
    }
  </script>

</head>

<body>
  <div class="wrapper container">
    <div class="content" role="main">

      <!-- This is the start of content for our page -->
      <h1>Order-lunch</h1>
<!--       <p> -->
<!--         A poll built with Chart.js and powered by Node.js with a {{seo.db}} database. -->
<!--       </p>  -->
      {{#if error}}
      <p class="error">
        {{error}}
      </p>
      
      {{else}}
      <!-- Server returns a flag when the user has submitted a choice and we show the results -->
      
      {{#if results}}
      <h2>
        Results
      </h2>
      <div class="poll-results">
        <p>
          Submissions so far (see the <a href="/logs">Admin</a> page for a log):
        </p>
        <p>
          <!-- Pass arrays from the API to the chart script in page head -->
          <canvas id="myChart"></canvas>
          <script type="text/javascript">
            showChart("{{{ optionNames }}}".split(","), "{{{ optionCounts }}}".split(","));
          </script>
        </p>
        <!-- If the user hasn't already made a choice we show the poll -->
      </div>
      
      {{else}}
      <h2>
        名前
      </h2>
      <div class="poll-form">
  
        <!-- Call the server post endpoint when the user submits an option in the poll -->
        <form method="post" action="/">
          <!-- The server script returns the list of language options to offer in the poll -->
          {{#each optionNames}}
          <input type="radio" id="{{this}}" name="language" value="{{this}}" required />
          <label for="{{this}}">{{this}}</label>
          {{/each}}
          <br /><br />
          <button type="submit">
            Submit
          </button>
        </form>
        <!-- ADD LINK FROM TODO -->
        
      </div>
      {{/if}}
      {{/if}}

      <!-- Instructions on using this project -->
<!--       <div class="instructions">
        <h2>
          Using this project
        </h2>
        <p>
          This is the Glitch <strong>Hello {{seo.db}}</strong> project. You can use it to build your own app. Check out README.md in the editor for more info and next steps you can take!
        </p>
      </div> -->
      
      <br>
<!--       <button>slot</button>
      <button onclick="location.href="/src/pages/index_2.html>slot</but></button>
      <input type="button" onclick="location.href="/src/pages/index_2.html"" value="slot">
      <a href="./src/pages/index_2.html">slot</a> -->
      <a href="/index2">
        <button type="button">slots</button>
      </a>
      
      <!--slot -->
      <div>
        <p>迷ったらこれ！</p>
        <main></main>
        <div id="spin">SPIN</div>
        <br>
      </div>


    </div>
  </div>
  <!-- The footer holds our remix button — you can use it for structure or cut it out ✂ -->
  
  <footer class="footer container">
    <div class="links d-flex align-items-center justify-content-center"></div>
    <a href="/">Home</a>
    <span class="divider">|</span>
    <a href="/logs">Admin</a>
<!--     <a class="btn--remix" target="_top" href="https://glitch.com/edit/#!/remix/glitch-hello-sqlite">
      <img src="https://cdn.glitch.com/605e2a51-d45f-4d87-a285-9410ad350515%2FLogo_Color.svg?v=1618199565140"
        alt="" />
      Remix on Glitch
    </a> -->
  </footer>
  
  
  <script
          
　　<!--slot-->
      {
        class Panel {
          constructor() {
            //new Panel()で実行される部分。
            const section = document.createElement("section"); //constでsectionを定義したのは、sectionはこのコンストラクターの中でしか使わないから。
            section.classList.add("panel");

            this.img = document.createElement("img"); //「this」はこのクラスのインスタンス。this.imgはインスタンスのimgプロパティのことを指す。「this」は、この「section」クラスから作られるインスタンス。sectionクラスで作られたインスタンスのプロパティにアクセスする。
            this.img.src = this.getRandomImage();

            this.timeoutId = undefined; //this.timeoutId = undefined; の一行は、なくても動作はしますが、あったほうが分かりやすいだろう、ということで入れているコードになります。

            this.stop = document.createElement("div");
            this.stop.textContent = "STOP";
            this.stop.classList.add("stop", "inactive");
            this.stop.addEventListener("click", () => {
              if (this.stop.classList.contains("inactive")) {
                return;
              }
              this.stop.classList.add("inactive");
              clearTimeout(this.timeoutId); //clearTimeout()に渡すタイムアウトIDが必要。
              panelsLeft--; //panelsLeftを一つ減らす
              if (panelsLeft === 0) {
                spin.classList.remove("inactive");
                panelsLeft = 3;
                checkResult();
              }
            });

            section.appendChild(this.img);
            section.appendChild(this.stop);

            const main = document.querySelector("main");
            main.appendChild(section);
          }

          getRandomImage() {
            //Panelクラスもプロパティを使いたいので、Panelクラス内に書いている。spinやgetRandomImageはPanelクラスの内部状態を変えることのみに利用する。
            const images = [
              "https://cdn.glitch.me/9e202854-dc96-45bd-97a9-b3bd48f4de2e%2F%E3%81%95%E3%81%8F%E3%82%89%E5%BC%81%E5%BD%93.png?v=1637897873575",
              "https://cdn.glitch.me/9e202854-dc96-45bd-97a9-b3bd48f4de2e%2F%E9%9D%92%E5%B1%B1%E5%BC%81%E5%BD%93.png?v=1637897873575",
              "https://cdn.glitch.me/9e202854-dc96-45bd-97a9-b3bd48f4de2e%2F%E3%82%B7%E3%83%AA%E3%82%B6%E3%83%8A.png?v=1637897875108"
            ];
            return images[Math.floor(Math.random() * images.length)];
          }

          spin() {
            //クラス内のメソッド定義にはfunctionは必要ない。
            this.img.src = this.getRandomImage();
            this.timeoutId = setTimeout(() => {
              this.spin(); //Panelクラスのインスタンスのメソッド
            }, 100); //50ミリ秒後に処理をしなさいという意味
          }

          isUnmatched(p1, p2) {
            //p1とp2は仮引数。比較する他のパネルを受け取る。
            //   if (this.img.src !== p1.img.src && this.img.src !== p2.img.src) {
            //     return true;
            //   } else {
            //     return false;
            //   }
            // }
            return this.img.src !== p1.img.src && this.img.src !== p2.img.src; //上の条件式と同じようにtrueかfalseをリターンする
          }

          unmatch() {
            this.img.classList.add("unmatched");
          }

          activate() {
            this.img.classList.remove("unmatched");
            this.stop.classList.remove("inactive");
          }
        }

        function checkResult() {
          //一つ一つのパネルに対する処理ではないのでパネルクラスの外に書く。
          if (panels[0].isUnmatched(panels[1], panels[2])) {
            //panels[1],panels[2]は実引数。isUnmatched(仮引数, 仮引数) は Panelクラスのメソッドなので、これを利用するには、Panelクラスのインスタンスを生成してから、「panel.isUnmatched(実引数, 実引数);」 のような形でメソッドを呼ぶ．
            panels[0].unmatch();
          }
          if (panels[1].isUnmatched(panels[0], panels[2])) {
            panels[1].unmatch();
          }
          if (panels[2].isUnmatched(panels[0], panels[1])) {
            panels[2].unmatch();
          }
        }

        const panels = [
          new Panel(), //Panelクラスのconstructorが実行される。getRandomImageやspinは実行されない。それらは任意に実行される。
          new Panel(),
          new Panel()
        ];

        let panelsLeft = 3; //あといくつ動いているパネルが残っているかの変数

        const spin = document.getElementById("spin");
        spin.addEventListener("click", () => {
          if (spin.classList.contains("inactive")) {
            return;
          }
          spin.classList.add("inactive");
          panels.forEach(panel => {
            //Panelsは配列「[Panel, Panel, Panel]」。Panelクラスのインスタンスが配列で入っている。panel（変数）はオブジェクト「{img: img, stop: div.stop}」
            panel.activate();
            panel.spin();
          });
        });
      }
    </script>
  
    <!--     bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
  
</body>

</html>
